---
- name: Initialize Kubernetes Cluster on Control Plane Node
  hosts: k8s_masters[0]  # Only run on first master node
  gather_facts: true
  serial: 1
  vars_files:
    - ../group_vars/vault.yml
    - ../inventory/group_vars/proxmox.yml
  become: yes

  tasks:
    # CLUSTER INITIALIZATION
    - name: Check if cluster is already initialized
      ansible.builtin.stat:
        path: /etc/kubernetes/admin.conf
      register: cluster_initialized

    - name: Log cluster status check
      ansible.builtin.debug:
        msg: "Cluster status: {{ 'Already initialized' if cluster_initialized.stat.exists else 'Not initialized' }}"

    - name: Initialize Kubernetes cluster
      ansible.builtin.command: |
        kubeadm init 
        --apiserver-advertise-address={{ ansible_default_ipv4.address }} 
        --pod-network-cidr={{ pod_network_cidr }}
      register: kubeadm_init_result
      when: not cluster_initialized.stat.exists

    - name: Log cluster initialization result
      ansible.builtin.debug:
        msg: "Cluster initialization: {{ 'Completed successfully' if kubeadm_init_result.changed else 'Skipped (already initialized)' }}"
      when: kubeadm_init_result is defined

    - name: Generate join command for worker nodes
      ansible.builtin.command: kubeadm token create --print-join-command
      register: join_command_result
      when: cluster_initialized.stat.exists or (kubeadm_init_result is defined and kubeadm_init_result.changed)

    - name: Set join command fact
      ansible.builtin.set_fact:
        join_command: "{{ join_command_result.stdout }}"
      when: join_command_result is defined and join_command_result.rc == 0

    - name: Log join command generation
      ansible.builtin.debug:
        msg: "Join command generated successfully"
      when: join_command is defined

    - name: Save join command with better formatting
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # Kubernetes Worker Node Join Command
          # Generated on: {{ ansible_date_time.iso8601 }}
          # Control plane: {{ ansible_hostname }} ({{ ansible_default_ipv4.address }})
          
          {{ join_command }}
        dest: "/tmp/kubeadm-join-command.sh"
        mode: '0755'
      when: join_command is defined
      delegate_to: localhost
      become: no

    - name: Log join command file creation
      ansible.builtin.debug:
        msg: "Join command saved to /tmp/kubeadm-join-command.sh on localhost"
      when: join_command is defined

    - name: Create .kube directory for user
      ansible.builtin.file:
        path: "/home/{{ vault_ci_user }}/.kube"
        state: directory
        owner: "{{ vault_ci_user }}"
        group: "{{ vault_ci_user }}"
        mode: '0755'
      when: kubeadm_init_result is defined and kubeadm_init_result.changed

    - name: Copy admin.conf to user's kube config
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ vault_ci_user }}/.kube/config"
        owner: "{{ vault_ci_user }}"
        group: "{{ vault_ci_user }}"
        mode: '0644'
        remote_src: yes
      when: kubeadm_init_result is defined and kubeadm_init_result.changed

    - name: Wait for cluster to be ready
      ansible.builtin.command: kubectl get nodes
      become_user: "{{ vault_ci_user }}"
      environment:
        KUBECONFIG: "/home/{{ vault_ci_user }}/.kube/config"
      register: cluster_status
      until: cluster_status.rc == 0
      retries: 10
      delay: 10
      when: kubeadm_init_result is defined and kubeadm_init_result.changed

    - name: Log cluster readiness
      ansible.builtin.debug:
        msg: 
          - "Cluster verification completed:"
          - "{{ cluster_status.stdout_lines }}"
      when: cluster_status is defined and cluster_status is not skipped and cluster_status.rc == 0

    - name: Verify existing cluster (if already initialized)
      ansible.builtin.command: kubectl get nodes
      become_user: "{{ vault_ci_user }}"
      environment:
        KUBECONFIG: "/home/{{ vault_ci_user }}/.kube/config"
      register: existing_cluster_status
      when: cluster_initialized.stat.exists and (kubeadm_init_result is not defined or not kubeadm_init_result.changed)

    - name: Log existing cluster status
      ansible.builtin.debug:
        msg:
          - "Existing cluster verification:"
          - "{{ existing_cluster_status.stdout_lines }}"
      when: existing_cluster_status is defined and existing_cluster_status is not skipped and existing_cluster_status.rc is defined and existing_cluster_status.rc == 0

    - name: Display cluster initialization summary
      ansible.builtin.debug:
        msg:
          - "Kubernetes Control Plane Setup Summary:"
          - "================================================================"
          - "✓ Control plane node: {{ ansible_hostname | default(inventory_hostname) }}"
          - "✓ API server address: {{ ansible_default_ipv4.address }}"
          - "✓ Pod network CIDR: {{ pod_network_cidr }}"
          - "✓ kubectl configured for user: {{ vault_ci_user }}"
          - "{{ '✓ Cluster verified and ready' if (cluster_status is defined and cluster_status is not skipped and cluster_status.rc is defined and cluster_status.rc == 0) or (existing_cluster_status is defined and existing_cluster_status is not skipped and existing_cluster_status.rc is defined and existing_cluster_status.rc == 0) else '✓ Cluster initialized' }}"
          - "{{ '✓ Join command ready for worker nodes' if join_command is defined else '✓ Cluster management ready' }}"
          - "================================================================"